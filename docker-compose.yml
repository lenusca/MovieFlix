# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: Movies # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: dockerfile
    ports:
      - "8888:8888" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    depends_on: 
      - db # This service depends on mysql. Start that first.
      - kafka
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/Movies?autoReconnect=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: lenusca
      SPRING_DATASOURCE_PASSWORD: password     
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend
    restart: always  
  # Frontend Service 
  app-client:
    build:
      context: movieflix # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: dockerfile
    ports:
      - "3000:80" # Map the exposed port 80 on the container to port 9090 on the host machine
    depends_on:
      - app-server
    networks:
      - frontend
     

  # Database Service (Mysql)
  db:
    image: mysql:5.7
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: Movies
      MYSQL_USER: lenusca
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend

  # Kafka
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "movieflix-topic:1:1"
    depends_on:
      - zookeeper
    networks:
      - backend 

# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:    